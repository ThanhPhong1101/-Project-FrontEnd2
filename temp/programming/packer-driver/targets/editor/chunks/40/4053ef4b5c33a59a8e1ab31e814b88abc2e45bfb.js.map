{"version":3,"sources":["file:///D:/ThanhPhong/FE02/Project-FrontEnd2/assets/Scripts/Bird.ts"],"names":["_decorator","AudioClip","AudioSource","CCFloat","Collider2D","Component","Contact2DType","lerp","log","RigidBody2D","tween","Vec2","Vec3","Game","SpriteAnimator","ccclass","property","State","Bird","type","tooltip","actionTime","state","WAITING","_wPos","rb","collider2D","tweenPos","startPos","timerRotateUp","timeElapsedDown","rotateLerpDuration","rotateLerpDurationUp","tweenRotateUp","faceUpAngle","hitSomething","onLoad","node","getComponent","gravityScale","copy","worldPosition","getWorldPosition","moveUp","y","to","easing","union","repeat","Infinity","on","BEGIN_CONTACT","onBeginContact","start","onDisable","stop","play","PLAYING","Flappy","DEAD","linearVelocity","applyForceToCenter","verticalForce","playOneShot","FlappySound","update","dt","velocity","UpdateFaceBirdAngle","angle","selfCollider","otherCollider","contact","tag","AddPoint","enabled","paused","Dead","end","time"],"mappings":"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","sourcesContent":["import {\r\n_decorator,\r\nAudioClip,\r\nAudioSource,\r\nCCFloat,\r\nCollider2D,\r\nComponent,\r\nContact2DType,\r\nIPhysics2DContact,\r\nlerp,\r\nlog,\r\nNode,\r\nRigidBody2D,\r\nTween,\r\ntween,\r\nVec2,\r\nVec3,\r\n} from 'cc'; // Import các module từ 'cc'\r\n\r\nconst { ccclass, property } = _decorator; // Gán giá trị của ccclass và property từ _decorator\r\n\r\n// Tạo một enum với các trạng thái: WAITING, PLAYING, DEAD\r\nenum State {\r\n    WAITING = 0,\r\n    PLAYING = 1,\r\n    DEAD = 2,\r\n}\r\n\r\nimport { Game } from './Game'; // Import class Game từ tệp Game.ts\r\nimport { SpriteAnimator } from './SpriteAnimator'; // Import class SpriteAnimator từ tệp SpriteAnimator.ts\r\n\r\n@ccclass('Bird')\r\nexport class Bird extends Component // Định nghĩa class Bird kế thừa từ Component\r\n{\r\n    public actionTime: number = 1; // Thời gian hoạt động mặc định\r\n\r\n    @property({ type: Game })\r\n    public Game: Game; // Tham chiếu đến đối tượng Game\r\n\r\n    @property({ type: CCFloat })\r\n    public verticalForce: number = 300; // Lực đẩy theo chiều dọc mặc định\r\n\r\n    @property({ type: AudioSource, tooltip: \"Add AudioSource node\", })\r\n    public AudioSource: AudioSource; // Tham chiếu đến nút AudioSource\r\n\r\n    @property({ type: AudioClip, tooltip: \"Add FlappySound node\", })\r\n    public FlappySound: AudioClip; // Tham chiếu đến âm thanh Flappy\r\n\r\n    public state: State = State.WAITING; // Trạng thái ban đầu của Bird\r\n\r\n    _wPos: Vec3 = new Vec3(0, 0, 0); // Vị trí thế giới của Bird\r\n\r\n    private rb: RigidBody2D; // Tham chiếu đến RigidBody2D\r\n    private collider2D: Collider2D; // Tham chiếu đến Collider2D\r\n    private SpriteAnimator: SpriteAnimator; // Tham chiếu đến SpriteAnimator\r\n\r\n    private tweenPos: Tween<Vec3>; // Tween cho vị trí\r\n\r\n    private startPos: Vec3; // Vị trí bắt đầu\r\n\r\n    private timerRotateUp: number = 0; // Thời gian quay lên\r\n    private timeElapsedDown: number = 0; // Thời gian trôi qua khi quay xuống\r\n\r\n    private rotateLerpDuration: number = 10; // Thời gian quay mềm xuống\r\n    private rotateLerpDurationUp: number = 0.5; // Thời gian quay mềm lên\r\n\r\n    private tweenRotateUp: Tween<number>; // Tween cho góc quay lên\r\n\r\n    private faceUpAngle: number = 15; // Góc quay lên\r\n\r\n    public hitSomething: boolean = false; // Đánh dấu đã va chạm với vật gì đó\r\n\r\n    protected onLoad(): void // Hàm được gọi khi nạp xong\r\n    {\r\n        this.state = State.WAITING; // Thiết lập trạng thái ban đầu là WAITING\r\n        this.rb = this.node.getComponent(RigidBody2D); // Lấy tham chiếu đến RigidBody2D\r\n        this.collider2D = this.node.getComponent(Collider2D); // Lấy tham chiếu đến Collider2D\r\n        this.SpriteAnimator = this.node.getComponent(SpriteAnimator); // Lấy tham chiếu đến SpriteAnimator\r\n        this.rb.gravityScale = 0; // Tắt trọng lực cho đến khi bắt đầu chơi\r\n\r\n        Vec3.copy(this._wPos, this.node.worldPosition); // Sao chép vị trí thế giới của Bird\r\n        this.startPos = this.node.getWorldPosition(); // Lưu vị trí bắt đầu\r\n        let moveUp = this.node.getWorldPosition(); // Di chuyển lên trên\r\n        moveUp.y += 20;\r\n\r\n        // Tạo tween cho vị trí của Bird\r\n        this.tweenPos = tween(this._wPos)\r\n            .to(this.actionTime, moveUp, { easing: 'linear' })\r\n            .to(this.actionTime, this.startPos, { easing: 'linear' })\r\n            .union()\r\n            .repeat(Infinity);\r\n\r\n        if (this.collider2D != null) // Kiểm tra nếu có Collider2D\r\n        {\r\n            // Đăng ký sự kiện va chạm\r\n            this.collider2D.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n    }\r\n\r\n    protected start(): void // Hàm được gọi khi khởi động\r\n    {\r\n        this.tweenPos.start(); // Bắt đầu tween vị trí\r\n    }\r\n\r\n    protected onDisable(): void // Hàm được gọi khi tắt\r\n    {\r\n        this.tweenPos.stop(); // Dừng tween vị trí\r\n    }\r\n\r\n    public play(): void // Phương thức để bắt đầu chơi\r\n    {\r\n        if (this.state == State.WAITING) // Nếu đang ở trạng thái WAITING\r\n        {\r\n            this.state = State.PLAYING; // Thiết lập trạng thái là PLAYING\r\n            this.rb.gravityScale = 1; // Bật trọng lực\r\n        }\r\n        if (this.state == State.PLAYING) // Nếu đang ở trạng thái PLAYING\r\n        {\r\n            this.Flappy(); // Gọi phương thức Flappy\r\n        }\r\n    }\r\n\r\n    public Flappy(): void // Phương thức để làm Bird nhảy\r\n    {\r\n        if (this.state == State.DEAD) return; // Nếu đã chết thì không thực hiện gì\r\n\r\n        this.rb.linearVelocity = new Vec2(0, 0); // Đặt vận tốc tuyến tính về 0\r\n        this.rb.applyForceToCenter(new Vec2(0, this.verticalForce), true); // Áp dụng lực để Bird nhảy\r\n        this.AudioSource.playOneShot(this.FlappySound, 1); // Phát âm thanh nhảy\r\n    }\r\n\r\n    protected update(dt: number): void // Hàm được gọi mỗi frame\r\n    {\r\n        if (this.state == State.DEAD) // Nếu Bird đã chết\r\n        {\r\n            let velocity = this.rb.linearVelocity; // Lấy vận tốc\r\n            this.UpdateFaceBirdAngle(velocity, dt); // Cập nhật góc quay của Bird\r\n            return; // Thoát khỏi hàm update\r\n        }\r\n\r\n        if (this.state == State.WAITING) // Nếu Bird đang ở trạng thái chờ đợi\r\n        {\r\n            this.node.worldPosition = this._wPos; // Cập nhật vị trí của Bird\r\n        }\r\n\r\n        if (this.state == State.PLAYING) // Nếu Bird đang ở trạng thái chơi\r\n        {\r\n            let velocity = this.rb.linearVelocity; // Lấy vận tốc\r\n            this.UpdateFaceBirdAngle(velocity, dt); // Cập nhật góc quay của Bird\r\n        }\r\n    }\r\n\r\n    private UpdateFaceBirdAngle(velocity: Vec2, dt: number) // Phương thức để cập nhật góc quay của Bird\r\n    {\r\n        if (velocity.y > 1) // Nếu Bird đang bay lên\r\n        {\r\n            this.timerRotateUp = 0; // Đặt thời gian quay lên về 0\r\n            if (this.timeElapsedDown < this.rotateLerpDurationUp) // Nếu thời gian trôi qua khi quay xuống nhỏ hơn thời gian quay mềm lên\r\n            {\r\n                this.timeElapsedDown += dt; // Tăng thời gian trôi qua\r\n                this.node.angle = lerp(this.node.angle, this.faceUpAngle, this.timeElapsedDown / this.rotateLerpDurationUp); // Cập nhật góc quay mềm lên\r\n            }\r\n            else // Nếu đã đủ thời gian quay mềm lên\r\n            {\r\n                this.node.angle = this.faceUpAngle; // Đặt góc quay của Bird thành góc quay lên\r\n            }\r\n        }\r\n        else if (velocity.y < 0) // Nếu Bird đang rơi xuống\r\n        {\r\n            this.timeElapsedDown = 0; // Đặt thời gian trôi qua khi quay xuống về 0\r\n            if (this.timerRotateUp < this.rotateLerpDuration) // Nếu thời gian quay lên nhỏ hơn thời gian quay mềm xuống\r\n            {\r\n                this.timerRotateUp += dt; // Tăng thời gian quay lên\r\n                this.node.angle = lerp(this.node.angle, -90, this.timerRotateUp / this.rotateLerpDuration); // Cập nhật góc quay mềm xuống\r\n            }\r\n            else // Nếu đã đủ thời gian quay mềm xuống\r\n            {\r\n                this.node.angle = -90; // Đặt góc quay của Bird thành 90 độ\r\n            }\r\n        }\r\n    }\r\n\r\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) // Xử lý khi có va chạm\r\n    {\r\n        if (otherCollider.tag == 1) // Nếu va chạm với đối tượng có tag là 1 (điểm)\r\n        {\r\n            log(\"You hit a new point\"); // Log ra màn hình console\r\n            this.Game.AddPoint(); // Thêm điểm\r\n            otherCollider.enabled = false; // Tắt collider của đối tượng đó\r\n        }\r\n        else // Nếu va chạm với đối tượng khác\r\n        {\r\n            log(\"You die\"); // Log ra màn hình console\r\n            this.SpriteAnimator.paused = true; // Dừng SpriteAnimator\r\n            this.hitSomething = true; // Đánh dấu đã va chạm\r\n            this.state = State.DEAD; // Thiết lập trạng thái là DEAD\r\n            this.Game.Dead(); // Gọi phương thức Dead từ Game\r\n        }\r\n    }\r\n\r\n    protected lerp(start: number, end: number, time: number): number // Phương thức lerp để làm mềm di chuyển\r\n    {\r\n        return start + time * (end - start); // Tính toán giá trị mềm\r\n    }\r\n}\r\n\r\n"]}