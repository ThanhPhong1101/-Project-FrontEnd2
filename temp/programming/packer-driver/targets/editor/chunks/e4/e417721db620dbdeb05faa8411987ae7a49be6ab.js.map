{"version":3,"sources":["file:///D:/ThanhPhong/FE02/Project-FrontEnd2/assets/Scripts/Pipes.ts"],"names":["_decorator","Component","Node","Vec3","screen","find","UITransform","log","view","Game","ccclass","property","random","min","max","Math","Pipes","type","tooltip","tempStartLocationUp","tempStartLocationDown","scene","windowSize","game","bird","pipeSpeed","tempSpeed","isPass","onLoad","gameControl","getComponent","Scroll","speed","initPos","visibleSize","getVisibleSize","width","x","topPipe","bottomPipe","gap","topHeight","y","setPosition","tempPos","node","getPosition","update","deltaTime","state","abs","position","getWorldPosition","destroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, screen, find, UITransform, log, director, view } from 'cc';\r\n\r\nimport { Game } from './Game';\r\nimport { Bird } from './Bird';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n// Hàm tạo số ngẫu nhiên trong khoảng min và max\r\nconst random = (min, max) =>\r\n{\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n@ccclass('Pipes')\r\nexport class Pipes extends Component\r\n{\r\n    @property({ type: Node, tooltip: 'Top Pipe' })\r\n    public topPipe: Node;\r\n\r\n    @property({ type: Node, tooltip: 'Bottom Pipe' })\r\n    public bottomPipe: Node;\r\n\r\n    // Vị trí tạm thời của các ống trên và dưới\r\n    public tempStartLocationUp: Vec3 = new Vec3(0, 0, 0);  \r\n    public tempStartLocationDown: Vec3 = new Vec3(0, 0, 0); \r\n    public scene = screen.windowSize; // Kích thước màn hình hiện tại\r\n\r\n    // Các thuộc tính liên quan đến tốc độ ống\r\n    public game: Game; // Lấy tốc độ ống từ GameCtrl\r\n    public bird: Bird;\r\n    public pipeSpeed: number; // Tốc độ cuối cùng của ống\r\n    public tempSpeed: number; // Tốc độ tạm thời của ống khi di chuyển\r\n\r\n    // Cơ chế tính điểm\r\n    isPass: boolean; // Kiểm tra ống có vượt qua chim không\r\n\r\n    protected onLoad (): void\r\n    {\r\n        // Tìm kiếm GameCtrl\r\n        let gameControl = find(\"GameCtrl\");\r\n        if (gameControl == null)\r\n        {\r\n            log(\"GameCtrl not found\");\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            this.game = gameControl.getComponent(Game);\r\n            this.bird = this.game.bird;\r\n        }\r\n\r\n        // Thêm tốc độ ống vào biến tạm thời\r\n        this.pipeSpeed = this.game.Scroll.speed;\r\n\r\n        // Đặt vị trí ban đầu\r\n        this.initPos();\r\n\r\n        // Đặt cơ chế tính điểm dừng kích hoạt\r\n        this.isPass = false;\r\n    }\r\n\r\n    // Đặt vị trí ban đầu của các ống\r\n    initPos ()\r\n    {   \r\n        const visibleSize = view.getVisibleSize();\r\n        let width = visibleSize.width;\r\n\r\n        // Đặt vị trí ban đầu của x cho cả hai ống\r\n        this.tempStartLocationUp.x = (this.topPipe.getComponent(UITransform).width + width);\r\n        this.tempStartLocationDown.x = (this.bottomPipe.getComponent(UITransform).width + width);\r\n\r\n        // Các biến ngẫu nhiên cho khoảng cách giữa các ống\r\n        let gap = 50;  // Khoảng cách có thể đi qua\r\n        let topHeight = random(-30, 150);   // Chiều cao của ống trên\r\n\r\n        this.tempStartLocationUp.y = gap;\r\n        this.tempStartLocationDown.y = -gap;\r\n\r\n        // Đặt vị trí tạm thời thành vị trí thực tế\r\n        this.topPipe.setPosition(this.tempStartLocationUp.x, this.tempStartLocationUp.y);\r\n        this.bottomPipe.setPosition(this.tempStartLocationDown.x, this.tempStartLocationDown.y);\r\n\r\n        let tempPos = this.node.getPosition();\r\n        tempPos.y = topHeight;\r\n        this.node.setPosition(tempPos);\r\n    }\r\n\r\n    // Di chuyển các ống khi cập nhật game\r\n    protected update (deltaTime: number): void\r\n    {\r\n        if (this.bird == null)\r\n        {\r\n            log(\"bird is null\");\r\n            return;\r\n        }\r\n        if (this.bird.state == 0 || this.bird.state == 2) return;\r\n\r\n        // Lấy tốc độ ống\r\n        this.tempSpeed = Math.abs(this.pipeSpeed * deltaTime);\r\n\r\n        // Tạo vị trí tạm thời của các ống\r\n        this.tempStartLocationDown = this.bottomPipe.position;\r\n        this.tempStartLocationUp = this.topPipe.position;\r\n\r\n        // Di chuyển các vị trí tạm thời của các ống\r\n        this.tempStartLocationDown.x -= this.tempSpeed;\r\n        this.tempStartLocationUp.x -= this.tempSpeed;\r\n\r\n        // Đặt vị trí mới của các ống từ các vị trí tạm thời\r\n        this.bottomPipe.setPosition(this.tempStartLocationDown);\r\n        this.topPipe.setPosition(this.tempStartLocationUp);\r\n\r\n        // Kiểm tra nếu các ống đã vượt qua màn hình, đặt lại vị trí các ống\r\n        if (this.topPipe.getWorldPosition().x < (0 - this.scene.width))\r\n        {\r\n            // Tạo ống mới\r\n            // this.game.createPipe();\r\n\r\n            // Xóa node này để tiết kiệm bộ nhớ\r\n            this.destroy();\r\n        }\r\n    }\r\n}\r\n"]}