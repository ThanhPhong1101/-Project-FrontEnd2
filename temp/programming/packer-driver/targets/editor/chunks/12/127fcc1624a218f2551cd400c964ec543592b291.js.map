{"version":3,"sources":["file:///D:/ThanhPhong/FE02/Project-FrontEnd2/assets/Scripts/SpriteAnimator.ts"],"names":["_decorator","Component","Sprite","SpriteFrame","ccclass","property","SpriteAnimator","type","_currentFrame","_timeSinceLastFrame","onLoad","node","getComponent","update","deltaTime","paused","framesPerSecond","sprites","length","i","spriteFrame"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;;;;;;;;;OACxC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;gCAGjBM,c,WADZF,OAAO,CAAC,gBAAD,C,UAIHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAE,CAACL,MAAD;AAAP,OAAD,C,UAGRG,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAE,CAACJ,WAAD;AAAP,OAAD,C,2BAPb,MACaG,cADb,SACoCL,SADpC,CAEA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAcYO,aAdZ,GAcoC,CAdpC;AAAA,eAeYC,mBAfZ,GAe0C,CAf1C;AAAA;;AAiBcC,QAAAA,MAAM,GAChB;AACI,eAAKR,MAAL,GAAc,KAAKS,IAAL,CAAUC,YAAV,CAAuBV,MAAvB,CAAd;AACH;;AAEMW,QAAAA,MAAM,CAACC,SAAD,EACb;AAEI,cAAG,KAAKC,MAAR,EAAe;AAEf,eAAKN,mBAAL,IAA4BK,SAA5B;;AACA,cAAI,KAAKL,mBAAL,IAA4B,IAAI,KAAKO,eAAzC,EACA;AACI,iBAAKR,aAAL,GAAqB,CAAC,KAAKA,aAAL,GAAqB,CAAtB,IAA2B,KAAKS,OAAL,CAAaC,MAA7D;AACA,iBAAKT,mBAAL,GAA2B,CAA3B;AACH;;AAED,eAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,OAAL,CAAaC,MAAjC,EAAyC,EAAEC,CAA3C,EACA;AACI;AACA,iBAAKjB,MAAL,CAAYkB,WAAZ,GAA0B,KAAKH,OAAL,CAAa,KAAKT,aAAlB,CAA1B;AACH;AACJ;;AAvCL,O;;;;;;;;;;iBAMoC,E;;0FAE/BH,Q;;;;;iBACgC,E;;iFAEhCA,Q;;;;;iBACwB,K","sourcesContent":["import { _decorator, Component, Node, Sprite, SpriteFrame } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SpriteAnimator')\nexport class SpriteAnimator extends Component \n{\n\n    @property({type: [Sprite]})\n    public Sprite: Sprite;\n\n    @property({type: [SpriteFrame]})\n    public sprites: SpriteFrame[] = [];\n\n    @property\n    public framesPerSecond: number = 10;\n\n    @property\n    public paused: boolean = false;\n\n    private _currentFrame: number = 0;\n    private _timeSinceLastFrame: number = 0;\n\n    protected onLoad (): void\n    {\n        this.Sprite = this.node.getComponent(Sprite);\n    }\n\n    public update(deltaTime: number)\n    {\n\n        if(this.paused)return;\n\n        this._timeSinceLastFrame += deltaTime;\n        if (this._timeSinceLastFrame >= 1 / this.framesPerSecond)\n        {\n            this._currentFrame = (this._currentFrame + 1) % this.sprites.length;\n            this._timeSinceLastFrame = 0;\n        }\n\n        for (let i = 0; i < this.sprites.length; ++i)\n        {\n            // this.sprites[i].active = i == this._currentFrame;\n            this.Sprite.spriteFrame = this.sprites[this._currentFrame];\n        }\n    }\n}\n\n\n"]}