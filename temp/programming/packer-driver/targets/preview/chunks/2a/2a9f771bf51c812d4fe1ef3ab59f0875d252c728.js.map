{"version":3,"sources":["file:///D:/ThanhPhong/FE02/Project-FrontEnd2/assets/Scripts/Game.ts"],"names":["_decorator","AudioClip","AudioSource","Collider2D","Component","Contact2DType","director","Input","input","KeyCode","log","Node","RichText","tween","UIOpacity","Vec3","Bird","Scroll","PipePool","FlashUI","ccclass","property","Game","type","tooltip","isOver","score","timerSpawnPipe","onLoad","SpriteFade","opacity","initListener","GameOverNode","active","position","toString","getWorldPosition","gameOverStartPos","gameOverHidePos","x","y","z","setPosition","target","to","start","on","EventType","KEY_DOWN","OnKeyDown","TOUCH_START","touchStart","GAMEPAD_INPUT","GamePadOnKeyDown","event","gamepad","buttonSouth","getValue","FlapBird","OnClick","keyCode","KEY_A","SPACE","resetGame","startGame","bird","play","AddPoint","ScoreLabel","string","playOneShot","scoreSound","Dead","Flash","StopScroll","hitSound","labelScore","recoverScore","localStorage","getItem","setItem","bestScore","parseInt","labelBestScore","onClickRestartGame","customData","call","RestartGame","countGamePlay","count","loadScene","update","dt","pipeQueue","addPool","contactGroundPipe","collider","node","getComponent","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","hitSomething"],"mappings":"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","sourcesContent":["import { _decorator, AudioClip, AudioPCMDataView, AudioSource, Collider2D, Component, Contact2DType, director, EventGamepad, EventKeyboard, EventMouse, Input, input, KeyCode, log, Node, NodeEventType, RichText, Scene, sys, tween, UIOpacity, Vec2, Vec3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\nimport { Bird } from './Bird';\nimport { Scroll } from './Scroll';\nimport { PipePool } from './PipePool';\nimport { AndroidNative } from './Android/AndroidNative';\nimport { FlashUI } from './UI/FlashUI';\n\n@ccclass('Game')\nexport class Game extends Component\n{\n\n    @property({ type: Bird, tooltip: \"Add Bird node\", })\n    public bird: Bird;\n\n    @property({ type: Scroll, tooltip: \"Add Scroll node\", })\n    public Scroll: Scroll;\n\n    @property({ type: UIOpacity, tooltip: \"Add UIOpacity node\", })\n    public SpriteFade: UIOpacity;\n\n    @property({ type: Node, tooltip: \"Add GameOver node\", })\n    public GameOverNode: Node;\n\n    @property({ type: PipePool, tooltip: \"Add PipePool node\", })\n    public pipeQueue: PipePool;\n\n    //needed to tell the game it's over\n    public isOver: boolean;\n\n    @property({ type: AudioSource, tooltip: \"Add AudioSource node\", })\n    public AudioSource: AudioSource;\n\n    @property({ type: AudioClip, tooltip: \"Add hitSound node\", })\n    public hitSound: AudioClip;\n\n    @property({ type: AudioClip, tooltip: \"Add hitSound node\", })\n    public scoreSound: AudioClip;\n\n    public score: number = 0;\n\n    @property({ type: RichText, tooltip: \"Add ScoreLabel node\", })\n    public ScoreLabel: RichText = null;\n\n    @property({ type: Vec3, tooltip: \"Add GameOverStartPos node\", })\n    public gameOverStartPos: Vec3;\n\n    @property({ type: Vec3, tooltip: \"Add GameOverStartPos node\", })\n    public gameOverHidePos: Vec3;\n\n    @property({ type: RichText, tooltip: \"Add labelScore node\", })\n    public labelScore: RichText = null;\n\n    @property({ type: RichText, tooltip: \"Add labelBestScore node\", })\n    public labelBestScore: RichText = null;\n\n    @property({type: FlashUI, tooltip: \"The Flash Screen\" })\n    public FlashUI: FlashUI;    \n\n    protected onLoad (): void\n    {\n        this.score = 0;\n        this.isOver = true;\n        this.SpriteFade.opacity = 255;\n        this.initListener();\n\n        //disable game over node\n        this.GameOverNode.active = false;\n\n        log(\"Game Over Pos \" + this.GameOverNode.position.toString());\n        log(\"Game Over World Pos \" + this.GameOverNode.getWorldPosition());\n\n        this.gameOverStartPos = this.GameOverNode.getWorldPosition();\n        this.gameOverHidePos = new Vec3(this.gameOverStartPos.x, this.gameOverStartPos.y - 1000, this.gameOverStartPos.z);\n        this.GameOverNode.setPosition(new Vec3(0, -1000));\n\n        tween().\n            target(this.SpriteFade)\n            .to(0.5, { opacity: 0 })\n            .start();\n    }\n\n    initListener (): void\n    {\n        \n        input.on(Input.EventType.KEY_DOWN, this.OnKeyDown, this);\n        // input.on(Input.EventType.MOUSE_DOWN, this.OnClick, this)\n        input.on(Input.EventType.TOUCH_START, this.touchStart, this);       \n        input.on(Input.EventType.GAMEPAD_INPUT, this.GamePadOnKeyDown, this);     \n    }\n\n    private GamePadOnKeyDown (event: EventGamepad): void\n    {\n        if (event.gamepad.buttonSouth.getValue() == 1)\n        {\n            this.FlapBird();\n        }\n    }\n\n\n    private OnClick (event: EventMouse): void\n    {\n        log(\"Mouse Click\");\n        this.FlapBird();\n    }\n\n    private touchStart (): void\n    {\n        log(\"Click and Touch\");\n        this.FlapBird();\n    }\n\n    OnKeyDown (event: EventKeyboard)\n    {\n        switch (event.keyCode)\n        {\n            case KeyCode.KEY_A:\n                log(\"You Press the A Key\");\n                break;\n            case KeyCode.SPACE:\n                {\n                    this.FlapBird();\n                }\n                break;\n        }\n    }\n\n    public FlapBird (): void\n    {\n        log(\"Flap Bird\");\n        if (this.isOver) \n        {\n            this.resetGame();\n            // this.bird.resetBird();\n            this.startGame();\n\n        }\n\n        if (this.isOver == false)\n        {\n            if (this.bird == null)\n            {\n                // node is null\n                log(\"The Bird is Null asign on the editor\");\n            }\n            this.bird.play();\n        }\n    }\n\n    startGame () :void\n    {\n        this.isOver = false;\n        // this.Scroll.StartScroll();\n        //this.pipeQueue.addPool();\n    }\n\n    resetGame ():void\n    {\n        this.isOver = false;\n        // this.pipeQueue.reset();//We should just pause the pipe queue\n        // this.bird.resetBird();\n        // this.Scroll.reset();\n    }\n\n    AddPoint ():void\n    {\n        this.score++;\n        this.ScoreLabel.string = this.score.toString();\n        this.AudioSource.playOneShot(this.scoreSound, 1);\n    }\n\n    Dead (): void\n    {\n        if (this.isOver == false)\n        {\n            this.FlashUI.Flash();\n            \n            this.isOver = true;\n            this.Scroll.StopScroll();\n            this.AudioSource.playOneShot(this.hitSound, 1);\n            this.GameOverNode.active = true;\n\n            this.labelScore.string = this.score.toString();\n\n            //get the saved score, data is only saved as string.\n            let recoverScore = localStorage.getItem(\"bestScore\");\n            if (recoverScore == null)\n            {\n                localStorage.setItem(\"bestScore\", \"0\");\n            }\n            let bestScore = parseInt(localStorage.getItem(\"bestScore\"));\n\n            if (this.score > bestScore)\n            {\n                bestScore = this.score;\n                localStorage.setItem(\"bestScore\", bestScore.toString());\n            }\n\n            this.labelBestScore.string = bestScore.toString();\n\n            tween(this.GameOverNode)\n                .to(1, { position: new Vec3(0, 0) })\n                .start();\n        }\n    }\n\n    // The function that will be called when the button is clicked\n    public onClickRestartGame (event, customData)\n    {\n        tween().\n            target(this.SpriteFade)\n            .to(0.5, { opacity: 255 })\n            .call(this.RestartGame)\n            .start();\n    }\n\n    private RestartGame (): void\n    {\n        //count gameplay\n        let countGamePlay = localStorage.getItem(\"countGamePlay\");\n        if (countGamePlay == null)\n        {\n            localStorage.setItem(\"countGamePlay\", \"0\");\n        }\n        let count = parseInt(localStorage.getItem(\"countGamePlay\"));\n        count++;\n        \n        if(count>3)\n        {\n            count = 0;\n        }        \n        localStorage.setItem(\"countGamePlay\", count.toString());\n\n        director.loadScene(\"game\");\n    }\n\n    timerSpawnPipe: number = 0;\n\n    protected update (dt: number): void\n    {\n        if (this.isOver == false)\n        {\n            this.timerSpawnPipe += dt;\n            if (this.timerSpawnPipe > 1)\n            {\n                this.timerSpawnPipe = 0;\n                this.pipeQueue.addPool();\n            }\n        }\n    }\n\n    contactGroundPipe (): void\n    {\n        let collider = this.bird.node.getComponent(Collider2D);\n        if (collider)\n        {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: any): void\n    {\n        this.bird.hitSomething = true;\n    }\n}\n\n\n"]}