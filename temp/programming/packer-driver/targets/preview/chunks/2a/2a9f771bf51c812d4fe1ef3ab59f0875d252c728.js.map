{"version":3,"sources":["file:///D:/ThanhPhong/FE02/Project-FrontEnd2/assets/Scripts/Game.ts"],"names":["_decorator","AudioClip","AudioSource","Collider2D","Component","Contact2DType","director","Input","input","KeyCode","log","Node","RichText","tween","UIOpacity","Vec3","Bird","Scroll","PipePool","FlashUI","ccclass","property","Game","type","tooltip","isOver","score","timerSpawnPipe","onLoad","SpriteFade","opacity","initListener","GameOverNode","active","position","toString","getWorldPosition","gameOverStartPos","gameOverHidePos","x","y","z","setPosition","target","to","start","on","EventType","KEY_DOWN","OnKeyDown","TOUCH_START","touchStart","GAMEPAD_INPUT","GamePadOnKeyDown","event","gamepad","buttonSouth","getValue","FlapBird","OnClick","keyCode","KEY_A","SPACE","resetGame","startGame","bird","play","AddPoint","ScoreLabel","string","playOneShot","scoreSound","Dead","Flash","StopScroll","hitSound","labelScore","recoverScore","localStorage","getItem","setItem","bestScore","parseInt","labelBestScore","onClickRestartGame","customData","call","RestartGame","countGamePlay","count","loadScene","update","dt","pipeQueue","addPool","contactGroundPipe","collider","node","getComponent","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","hitSomething"],"mappings":"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","sourcesContent":["import { _decorator, AudioClip, AudioSource, Collider2D, Component, Contact2DType, director, EventGamepad, EventKeyboard, EventMouse, Input, input, KeyCode, log, Node, RichText, tween, UIOpacity, Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nimport { Bird } from './Bird';\r\nimport { Scroll } from './Scroll';\r\nimport { PipePool } from './PipePool';\r\nimport { FlashUI } from './UI/FlashUI';\r\n\r\n@ccclass('Game')\r\nexport class Game extends Component {\r\n\r\n    @property({ type: Bird, tooltip: \"Add Bird node\" })\r\n    public bird: Bird;\r\n\r\n    @property({ type: Scroll, tooltip: \"Add Scroll node\" })\r\n    public Scroll: Scroll;\r\n\r\n    @property({ type: UIOpacity, tooltip: \"Add UIOpacity node\" })\r\n    public SpriteFade: UIOpacity;\r\n\r\n    @property({ type: Node, tooltip: \"Add GameOver node\" })\r\n    public GameOverNode: Node;\r\n\r\n    @property({ type: PipePool, tooltip: \"Add PipePool node\" })\r\n    public pipeQueue: PipePool;\r\n\r\n    public isOver: boolean;\r\n\r\n    @property({ type: AudioSource, tooltip: \"Add AudioSource node\" })\r\n    public AudioSource: AudioSource;\r\n\r\n    @property({ type: AudioClip, tooltip: \"Add hitSound node\" })\r\n    public hitSound: AudioClip;\r\n\r\n    @property({ type: AudioClip, tooltip: \"Add scoreSound node\" })\r\n    public scoreSound: AudioClip;\r\n\r\n    public score: number = 0;\r\n\r\n    @property({ type: RichText, tooltip: \"Add ScoreLabel node\" })\r\n    public ScoreLabel: RichText = null;\r\n\r\n    @property({ type: Vec3, tooltip: \"Add GameOverStartPos node\" })\r\n    public gameOverStartPos: Vec3;\r\n\r\n    @property({ type: Vec3, tooltip: \"Add GameOverHidePos node\" })\r\n    public gameOverHidePos: Vec3;\r\n\r\n    @property({ type: RichText, tooltip: \"Add labelScore node\" })\r\n    public labelScore: RichText = null;\r\n\r\n    @property({ type: RichText, tooltip: \"Add labelBestScore node\" })\r\n    public labelBestScore: RichText = null;\r\n\r\n    @property({ type: FlashUI, tooltip: \"The Flash Screen\" })\r\n    public FlashUI: FlashUI;    \r\n\r\n    protected onLoad(): void {\r\n        // Thiết lập trạng thái ban đầu của trò chơi\r\n        this.score = 0;\r\n        this.isOver = true;\r\n        this.SpriteFade.opacity = 255; // Thiết lập độ mờ ban đầu của SpriteFade là 255 (hoàn toàn hiện)\r\n        this.initListener(); // Gọi phương thức để khởi tạo các lắng nghe sự kiện\r\n\r\n        // Vô hiệu hóa node GameOver khi trò chơi bắt đầu\r\n        this.GameOverNode.active = false;\r\n\r\n        // Đặt vị trí bắt đầu và vị trí ẩn của node GameOver\r\n        log(\"Game Over Pos \" + this.GameOverNode.position.toString());\r\n        log(\"Game Over World Pos \" + this.GameOverNode.getWorldPosition());\r\n        this.gameOverStartPos = this.GameOverNode.getWorldPosition();\r\n        this.gameOverHidePos = new Vec3(this.gameOverStartPos.x, this.gameOverStartPos.y - 1000, this.gameOverStartPos.z); // Thiết lập vị trí ẩn của GameOverNode\r\n        this.GameOverNode.setPosition(new Vec3(0, -1000)); // Đặt vị trí ban đầu của GameOverNode ra khỏi màn hình\r\n\r\n        // Chuyển động làm mờ dần SpriteFade\r\n        tween().\r\n            target(this.SpriteFade)\r\n            .to(0.5, { opacity: 0 }) // Làm mờ SpriteFade trong 0.5 giây\r\n            .start();\r\n    }\r\n\r\n    initListener(): void {\r\n        // Đăng ký các sự kiện đầu vào\r\n        input.on(Input.EventType.KEY_DOWN, this.OnKeyDown, this); // Lắng nghe sự kiện nhấn phím\r\n        input.on(Input.EventType.TOUCH_START, this.touchStart, this); // Lắng nghe sự kiện chạm màn hình\r\n        input.on(Input.EventType.GAMEPAD_INPUT, this.GamePadOnKeyDown, this); // Lắng nghe sự kiện điều khiển gamepad\r\n    }\r\n\r\n    private GamePadOnKeyDown(event: EventGamepad): void {\r\n        // Kiểm tra nếu nút phía nam của gamepad được nhấn\r\n        if (event.gamepad.buttonSouth.getValue() == 1) {\r\n            this.FlapBird(); // Gọi phương thức FlapBird khi nút phía nam được nhấn\r\n        }\r\n    }\r\n\r\n    private OnClick(event: EventMouse): void {\r\n        log(\"Mouse Click\"); // Ghi nhật ký khi chuột được nhấp\r\n        this.FlapBird(); // Gọi phương thức FlapBird khi nhấp chuột\r\n    }\r\n\r\n    private touchStart(): void {\r\n        log(\"Click and Touch\"); // Ghi nhật ký khi màn hình được chạm\r\n        this.FlapBird(); // Gọi phương thức FlapBird khi màn hình được chạm\r\n    }\r\n\r\n    OnKeyDown(event: EventKeyboard) {\r\n        switch (event.keyCode) {\r\n            case KeyCode.KEY_A:\r\n                log(\"You Press the A Key\"); // Ghi nhật ký khi phím A được nhấn\r\n                break;\r\n            case KeyCode.SPACE:\r\n                {\r\n                    this.FlapBird(); // Gọi phương thức FlapBird khi phím Space được nhấn\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public FlapBird(): void {\r\n        log(\"Flap Bird\"); // Ghi nhật ký khi phương thức FlapBird được gọi\r\n        if (this.isOver) {\r\n            this.resetGame(); // Đặt lại trò chơi nếu trò chơi đã kết thúc\r\n            this.startGame(); // Bắt đầu trò chơi mới\r\n        }\r\n\r\n        if (this.isOver == false) {\r\n            if (this.bird == null) {\r\n                // Kiểm tra nếu đối tượng bird là null\r\n                log(\"The Bird is Null assign on the editor\"); // Ghi nhật ký nếu đối tượng bird là null\r\n            }\r\n            this.bird.play(); // Gọi phương thức play của đối tượng bird\r\n        }\r\n    }\r\n\r\n    startGame(): void {\r\n        this.isOver = false; // Đặt trạng thái trò chơi là chưa kết thúc\r\n        // this.Scroll.StartScroll(); // Bắt đầu cuộn nền (được comment lại)\r\n        // this.pipeQueue.addPool(); // Thêm đường ống vào hàng đợi (được comment lại)\r\n    }\r\n\r\n    resetGame(): void {\r\n        this.isOver = false; // Đặt trạng thái trò chơi là chưa kết thúc\r\n        // this.pipeQueue.reset(); // Đặt lại hàng đợi đường ống (được comment lại)\r\n        // this.bird.resetBird(); // Đặt lại đối tượng bird (được comment lại)\r\n        // this.Scroll.reset(); // Đặt lại cuộn nền (được comment lại)\r\n    }\r\n\r\n    AddPoint(): void {\r\n        this.score++; // Tăng điểm số\r\n        this.ScoreLabel.string = this.score.toString(); // Cập nhật nhãn điểm số\r\n        this.AudioSource.playOneShot(this.scoreSound, 1); // Phát âm thanh điểm số\r\n    }\r\n\r\n    Dead(): void {\r\n        if (this.isOver == false) {\r\n            this.FlashUI.Flash(); // Gọi phương thức Flash của FlashUI\r\n\r\n            this.isOver = true; // Đặt trạng thái trò chơi là kết thúc\r\n            this.Scroll.StopScroll(); // Dừng cuộn nền\r\n            this.AudioSource.playOneShot(this.hitSound, 1); // Phát âm thanh khi va chạm\r\n            this.GameOverNode.active = true; // Kích hoạt node GameOver\r\n\r\n            this.labelScore.string = this.score.toString(); // Cập nhật nhãn điểm số\r\n\r\n            // Lấy điểm số cao nhất từ localStorage\r\n            let recoverScore = localStorage.getItem(\"bestScore\");\r\n            if (recoverScore == null) {\r\n                localStorage.setItem(\"bestScore\", \"0\"); // Nếu không có điểm số cao nhất, đặt thành 0\r\n            }\r\n            let bestScore = parseInt(localStorage.getItem(\"bestScore\"));\r\n\r\n            if (this.score > bestScore) {\r\n                bestScore = this.score; // Cập nhật điểm số cao nhất nếu điểm hiện tại lớn hơn\r\n                localStorage.setItem(\"bestScore\", bestScore.toString()); // Lưu điểm số cao nhất mới vào localStorage\r\n            }\r\n\r\n            this.labelBestScore.string = bestScore.toString(); // Cập nhật nhãn điểm số cao nhất\r\n\r\n            // Chuyển động hiển thị GameOverNode\r\n            tween(this.GameOverNode)\r\n                .to(1, { position: new Vec3(0, 0) }) // Di chuyển GameOverNode đến vị trí (0, 0) trong 1 giây\r\n                .start();\r\n        }\r\n    }\r\n\r\n    public onClickRestartGame(event, customData): void {\r\n        // Chuyển động làm mờ dần SpriteFade\r\n        tween().\r\n            target(this.SpriteFade)\r\n            .to(0.5, { opacity: 255 }) // Làm mờ SpriteFade trong 0.5 giây\r\n            .call(this.RestartGame) // Gọi phương thức RestartGame sau khi làm mờ\r\n            .start();\r\n    }\r\n\r\n    private RestartGame(): void {\r\n        // Đếm số lần chơi trò chơi\r\n        let countGamePlay = localStorage.getItem(\"countGamePlay\");\r\n        if (countGamePlay == null) {\r\n            localStorage.setItem(\"countGamePlay\", \"0\"); // Nếu không có, đặt thành 0\r\n        }\r\n        let count = parseInt(localStorage.getItem(\"countGamePlay\"));\r\n        count++;\r\n\r\n        if(count > 3) {\r\n            count = 0; // Đặt lại đếm nếu vượt quá 3\r\n        }        \r\n        localStorage.setItem(\"countGamePlay\", count.toString()); // Lưu đếm vào localStorage\r\n\r\n        director.loadScene(\"game\"); // Tải lại cảnh game\r\n    }\r\n\r\n    timerSpawnPipe: number = 0;\r\n\r\n    protected update(dt: number): void {\r\n        if (this.isOver == false) {\r\n            this.timerSpawnPipe += dt;\r\n            if (this.timerSpawnPipe > 1) {\r\n                this.timerSpawnPipe = 0;\r\n                this.pipeQueue.addPool(); // Thêm đường ống vào hàng đợi sau mỗi giây\r\n            }\r\n        }\r\n    }\r\n\r\n    contactGroundPipe(): void {\r\n        let collider = this.bird.node.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this); // Lắng nghe sự kiện va chạm\r\n        }\r\n    }\r\n\r\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: any): void {\r\n        this.bird.hitSomething = true; // Đặt trạng thái va chạm của bird là true khi va chạm\r\n    }\r\n}\r\n"]}