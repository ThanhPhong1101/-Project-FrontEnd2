{"version":3,"sources":["file:///D:/ThanhPhong/FE02/Project-FrontEnd2/assets/Scripts/Bird.ts"],"names":["_decorator","AudioClip","AudioSource","CCFloat","Collider2D","Component","Contact2DType","lerp","log","RigidBody2D","tween","Vec2","Vec3","Game","SpriteAnimator","ccclass","property","State","Bird","type","tooltip","actionTime","state","WAITING","_wPos","rb","collider2D","tweenPos","startPos","timerRotateUp","timeElapsedDown","rotateLerpDuration","rotateLerpDurationUp","tweenRotateUp","faceUpAngle","hitSomething","onLoad","node","getComponent","gravityScale","copy","worldPosition","getWorldPosition","moveUp","y","to","easing","union","repeat","Infinity","on","BEGIN_CONTACT","onBeginContact","start","onDisable","stop","play","PLAYING","Flappy","DEAD","linearVelocity","applyForceToCenter","verticalForce","playOneShot","FlappySound","update","dt","velocity","UpdateFaceBirdAngle","angle","selfCollider","otherCollider","contact","tag","AddPoint","enabled","paused","Dead","end","time"],"mappings":"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","sourcesContent":["import\n{\n    _decorator,\n    AudioClip,\n    AudioSource,\n    CCFloat,\n    Collider2D,\n    Component,\n    Contact2DType,\n    IPhysics2DContact,\n    lerp,\n    log,\n    Node,\n    RigidBody2D,\n    Tween,\n    tween,\n    Vec2,\n    Vec3,\n} from 'cc';\nconst { ccclass, property } = _decorator;\n\n//create a enum waiting, playing, dead\nenum State\n{\n    WAITING = 0,\n    PLAYING = 1,\n    DEAD = 2,\n}\n\nimport { Game } from './Game';\nimport { SpriteAnimator } from './SpriteAnimator';\n\n@ccclass('Bird')\nexport class Bird extends Component\n{\n    public actionTime: number = 1;\n\n    @property({ type: Game })\n    public Game: Game;\n\n    @property({ type: CCFloat })\n    public verticalForce: number = 300;\n\n    @property({ type: AudioSource, tooltip: \"Add AudioSource node\", })\n    public AudioSource: AudioSource;\n\n    @property({ type: AudioClip, tooltip: \"Add FlappySound node\", })\n    public FlappySound: AudioClip;\n\n    public state: State = State.WAITING;\n\n    _wPos: Vec3 = new Vec3(0, 0, 0);\n\n    private rb: RigidBody2D;\n    private collider2D: Collider2D;\n    private SpriteAnimator: SpriteAnimator;\n\n    private tweenPos: Tween<Vec3>;\n\n    private startPos: Vec3;\n\n    private timerRotateUp: number = 0;\n    private timeElapsedDown: number = 0;\n\n    private rotateLerpDuration: number = 10;\n    private rotateLerpDurationUp: number = 0.5;\n\n    private tweenRotateUp: Tween<number>;\n\n    private faceUpAngle: number = 15;\n\n    public hitSomething: boolean = false;\n\n    protected onLoad (): void \n    {\n        this.state = State.WAITING;\n        this.rb = this.node.getComponent(RigidBody2D);\n        this.collider2D = this.node.getComponent(Collider2D);\n        this.SpriteAnimator = this.node.getComponent(SpriteAnimator);\n        this.rb.gravityScale = 0;\n\n        Vec3.copy(this._wPos, this.node.worldPosition);\n        this.startPos = this.node.getWorldPosition();\n        let moveUp = this.node.getWorldPosition();\n        moveUp.y += 20;\n\n        this.tweenPos = tween(this._wPos)\n            .to(this.actionTime, moveUp, { easing: 'linear' })\n            .to(this.actionTime, this.startPos, { easing: 'linear' })\n            .union()\n            .repeat(Infinity);\n        log('Load Finish');\n        if (this.collider2D != null)\n        {\n            this.collider2D.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);            \n        }\n    }\n\n    protected start (): void \n    {\n        this.tweenPos.start();\n    }\n\n    protected onDisable(): void \n    {\n        this.tweenPos.stop();   \n    }\n\n    public play (): void \n    {\n        if (this.state == State.WAITING)\n        {\n            this.state = State.PLAYING;\n            this.rb.gravityScale = 1;\n        }\n        if (this.state == State.PLAYING)\n        {\n            this.Flappy();\n        }\n    }\n\n    public Flappy (): void\n    {\n        if (this.state == State.DEAD) return;\n\n        this.rb.linearVelocity = new Vec2(0, 0);\n        this.rb.applyForceToCenter(new Vec2(0, this.verticalForce), true);\n        this.AudioSource.playOneShot(this.FlappySound, 1);\n    }\n\n    protected update (dt: number): void \n    {\n        if (this.state == State.DEAD)\n        {\n            let velocity = this.rb.linearVelocity;\n            this.UpdateFaceBirdAngle(velocity, dt);\n            return;\n        }\n\n        if (this.state == State.WAITING)\n        {\n            this.node.worldPosition = this._wPos;\n        }\n\n        if (this.state == State.PLAYING)\n        {\n            let velocity = this.rb.linearVelocity;\n            this.UpdateFaceBirdAngle(velocity, dt);\n        }\n    }\n\n    private UpdateFaceBirdAngle (velocity: Vec2, dt: number)\n    {\n        if (velocity.y > 1)\n        {\n            this.timerRotateUp = 0;\n            if (this.timeElapsedDown < this.rotateLerpDurationUp)\n            {\n                this.timeElapsedDown += dt;\n                this.node.angle = lerp(this.node.angle, this.faceUpAngle, this.timeElapsedDown / this.rotateLerpDurationUp);\n            }\n\n            else\n            {\n                this.node.angle = this.faceUpAngle;\n            }\n\n        }\n        else if (velocity.y < 0)\n        {\n            this.timeElapsedDown = 0;\n            if (this.timerRotateUp < this.rotateLerpDuration)\n            {\n                this.timerRotateUp += dt;\n                this.node.angle = lerp(this.node.angle, -90, this.timerRotateUp / this.rotateLerpDuration);\n            }\n\n            else\n            {\n                this.node.angle = -90;\n            }\n\n        }\n    }\n\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) \n    {\n        if (otherCollider.tag == 1)\n        {\n            log(\"You hit a new point\");\n            this.Game.AddPoint();\n            otherCollider.enabled = false;\n        }\n        else\n        {\n            log(\"You die\");\n            this.SpriteAnimator.paused = true;\n            this.hitSomething = true;\n            this.state = State.DEAD;\n            this.Game.Dead();\n        }\n    }\n\n    protected lerp (start: number, end: number, time: number): number\n    {\n        return start + time * (end - start);\n    }\n}\n"]}